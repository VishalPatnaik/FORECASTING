res_analysis(residuals(finite_dlm$model))
for (i in 1:3){
model_2 <-  polyDlm(x = as.vector(x) , y = as.vector(y), q = i , k = i, show.beta = FALSE)
cat("q = ", i, "k = ", i, "AIC = ", AIC(model_2$model), "BIC = ", BIC(model_2$model),"\n")
}
# Ploynomial DLM
PolyDLM_model = polyDlm(x = as.vector(x), y = as.vector(y), q = 3, k = 3, show.beta = TRUE)
summary(PolyDLM_model)
res_analysis(residuals(PolyDLM_model$model))
# Koyk DLM
Koyck_DLM = koyckDlm(x = as.vector(x) , y = as.vector(y))
summary(Koyck_DLM)
res_analysis(residuals(Koyck_DLM))
for (i in 1:10){
for(j in 1:5){
model_4 = ardlDlm(x = as.vector(x) , y = as.vector(y), p = i , q = j )
cat("p = ", i, "q = ", j, "AIC = ", AIC(model_4$model), "BIC = ", BIC(model_4$model),"\n")
}
}
# ARDLM model
AR_DLM = ardlDlm(x = as.vector(x) , y = as.vector(y), p = 10 , q = 1 )
summary(AR_DLM)
res_analysis(residuals(AR_DLM))
# Function for residual analysis.
res_analysis <- function(res_m) {
# Scatter plot for model residuals
plot(res_m, type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Standardized Residuals", main = "Plot of Residuals over Time")
abline(h = 0)
# Standard distribution
hist(res_m, xlab = 'Standardized Residuals', freq = FALSE)
curve(dnorm(x, mean = mean(res_m), sd = sd(res_m)), col = "red", lwd = 2, add = TRUE, yaxt = "n")
# QQplot for model residuals
qqnorm(res_m, col = c("blue"))
qqline(res_m)
# Auto-Correlation Plot
acf(res_m, main = "ACF of Standardized Residuals",col=c("blue"))
}
res_analysis(residuals(finite_dlm$model))
checkresiduals(finite_dlm$model)
# Function for residual analysis.
res_analysis <- function(res_m) {
# Scatter plot for model residuals
plot(residuals(res_m), type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Standardized Residuals", main = "Plot of Residuals over Time")
abline(h = 0)
# Standard distribution
hist(res_m, xlab = 'Standardized Residuals', freq = FALSE)
curve(dnorm(x, mean = mean(res_m), sd = sd(res_m)), col = "red", lwd = 2, add = TRUE, yaxt = "n")
# QQplot for model residuals
qqnorm(residuals(res_m), col = c("blue"))
qqline(residuals(res_m))
# Auto-Correlation Plot
acf(residuals(res_m), main = "ACF of Standardized Residuals",col=c("blue"))
}
res_analysis(finite_dlm$model)
# Function for residual analysis.
res_analysis <- function(res_m) {
# Scatter plot for model residuals
plot(residuals(res_m), type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Standardized Residuals", main = "Plot of Residuals over Time")
abline(h = 0)
# Standard distribution
hist(rstandard(res_m), xlab = 'Standardized Residuals', freq = FALSE)
curve(dnorm(x, mean = mean(res_m), sd = sd(res_m)), col = "red", lwd = 2, add = TRUE, yaxt = "n")
# QQplot for model residuals
qqnorm(residuals(res_m), col = c("blue"))
qqline(residuals(res_m))
# Auto-Correlation Plot
acf(residuals(res_m), main = "ACF of Standardized Residuals",col=c("blue"))
}
res_analysis(finite_dlm$model)
# Function for residual analysis.
res_analysis <- function(res_m) {
# Scatter plot for model residuals
plot(residuals(res_m), type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Standardized Residuals", main = "Plot of Residuals over Time")
abline(h = 0)
# Standard distribution
hist(rstandard(res_m), xlab = 'Standardized Residuals', freq = FALSE)
curve(dnorm(x, mean = mean(rstandard(res_m)), sd = sd(rstandard(res_m))), col = "red", lwd = 2, add = TRUE, yaxt = "n")
# QQplot for model residuals
qqnorm(residuals(res_m), col = c("blue"))
qqline(residuals(res_m))
# Auto-Correlation Plot
acf(residuals(res_m), main = "ACF of Standardized Residuals",col=c("blue"))
}
res_analysis(finite_dlm$model)
res_analysis(residuals(Koyck_DLM))
res_analysis((Koyck_DLM))
x = v_GOLD_price_TS # Independent variable2
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(x = as.vector(x) , y = as.vector(y), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
# Finite lag length based on AIC-BIC
finite_dlm = dlm( x = as.vector(x) , y = as.vector(y), q = 10)
summary(finite_dlm)
# Function for residual analysis.
res_analysis <- function(res_m) {
par(mfrow = c(2, 2))
# Scatter plot for model residuals
plot(res_m, type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Standardized Residuals", main = "Plot of Residuals over Time")
abline(h = 0)
# Standard distribution
hist(res_m, xlab = 'Standardized Residuals', freq = FALSE)
curve(dnorm(x, mean = mean(res_m), sd = sd(res_m)), col = "red", lwd = 2, add = TRUE, yaxt = "n")
# QQplot for model residuals
qqnorm(res_m, col = c("blue"))
qqline(res_m)
# Auto-Correlation Plot
acf(res_m, main = "ACF of Standardized Residuals",col=c("blue"))
}
res_analysis(residuals(finite_dlm$model))
for (i in 1:3){
model_2 <-  polyDlm(x = as.vector(x) , y = as.vector(y), q = i , k = i, show.beta = FALSE)
cat("q = ", i, "k = ", i, "AIC = ", AIC(model_2$model), "BIC = ", BIC(model_2$model),"\n")
}
# Ploynomial DLM
PolyDLM_model = polyDlm(x = as.vector(x), y = as.vector(y), q = 3, k = 3, show.beta = TRUE)
summary(PolyDLM_model)
res_analysis(residuals(PolyDLM_model$model))
# Koyk DLM
Koyck_DLM = koyckDlm(x = as.vector(x) , y = as.vector(y))
summary(Koyck_DLM)
res_analysis(residuals(Koyck_DLM))
for (i in 1:10){
for(j in 1:5){
model_4 = ardlDlm(x = as.vector(x) , y = as.vector(y), p = i , q = j )
cat("p = ", i, "q = ", j, "AIC = ", AIC(model_4$model), "BIC = ", BIC(model_4$model),"\n")
}
}
# ARDLM model
AR_DLM = ardlDlm(x = as.vector(x) , y = as.vector(y), p = 10 , q = 1 )
summary(AR_DLM)
res_analysis(residuals(AR_DLM))
x = v_CRUDE_price_TS # Independent variable2
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(x = as.vector(x) , y = as.vector(y), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
for (i in 1:3){
model_2 <-  polyDlm(x = as.vector(x) , y = as.vector(y), q = i , k = i, show.beta = FALSE)
cat("q = ", i, "k = ", i, "AIC = ", AIC(model_2$model), "BIC = ", BIC(model_2$model),"\n")
}
# Ploynomial DLM
PolyDLM_model = polyDlm(x = as.vector(x), y = as.vector(y), q = 3, k = 3, show.beta = TRUE)
summary(PolyDLM_model)
vif(PolyDLM_model)
library(car)
vif(PolyDLM_model)
library(car)
vif(PolyDLM_model$model)
x = v_CRUDE_price_TS # Independent variable2
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(x = as.vector(x) , y = as.vector(y), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
# Finite lag length based on AIC-BIC
finite_dlm = dlm( x = as.vector(x) , y = as.vector(y), q = 10)
summary(finite_dlm)
vif(Koyck_DLM_copper$model)
knitr::opts_chunk$set(echo = TRUE)
library(expsmooth) # Forecasting with Exponential Smoothing. [1] - https://cran.r-project.org/web/packages/expsmooth/index.html
library(dplyr)
library(forecast) # Forecasting Functions for Time Series and Linear Models. [2] - https://cran.r-project.org/web/packages/forecast/index.html
library(tseries) # Time Series Analysis and Computational Finance.[3] - https://cran.r-project.org/web/packages/tseries/index.html
library(fUnitRoots) # To analyze trends and unit roots in financial time series. [4] - https://cran.r-project.org/web/packages/fUnitRoots/index.html
library(TSA) # Time Series Analysis.
library(urca) # Unit Root and Cointegration Tests. [5] - https://cran.r-project.org/web/packages/urca/index.html
library(readr)
library(dLagM) # Distributed lag model.
library(VIF)
library(car)
v_ASX_data <- read.csv("ASX_data.csv", header = TRUE)
head(v_ASX_data)
# Using str() to check the type of each column.
str(v_ASX_data)
# Removing Commas
v_ASX_data$Gold.price = gsub(",","", v_ASX_data$Gold.price)
v_ASX_data$Copper_USD.tonne = gsub(",","", v_ASX_data$Copper_USD.tonne)
# Converting char to numeric
v_ASX_data$Gold.price = as.numeric(as.character(v_ASX_data$Gold.price))
v_ASX_data$Copper_USD.tonne = as.numeric(as.character(v_ASX_data$Copper_USD.tonne))
str(v_ASX_data)
colSums(is.na(v_ASX_data))
class(v_ASX_data)
v_ASX_price_TS <- ts(v_ASX_data$ASX.price, start = c(2004, 1), end = c(2017, 5), frequency = 12)
v_GOLD_price_TS <- ts(v_ASX_data$Gold.price, start = c(2004, 1), end = c(2017, 5), frequency = 12)
v_CRUDE_price_TS <- ts(v_ASX_data$Crude.Oil..Brent._USD.bbl, start = c(2004, 1), end = c(2017, 5), frequency = 12)
v_COPPER_price_TS <- ts(v_ASX_data$Copper_USD.tonne, start = c(2004, 1), end = c(2017, 5), frequency = 12)
class(v_ASX_price_TS)
class(v_GOLD_price_TS)
class(v_CRUDE_price_TS)
class(v_COPPER_price_TS)
plot(v_ASX_price_TS, type = "b", xlab = "years", ylab = "Price index", main = "ASX price change from 2004-1 to 2017-5 (161 months)", pch = 1)
legend("bottomright", inset = .03, title = "ASX price", legend = "ASX price series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_ASX_price_TS, main = "McLeod-Li Test Statistics for ASX price index")
plot(v_GOLD_price_TS, type = "b", xlab = "years", ylab = "Price index", main = "GOLD price change from 2004-1 to 2017-5 (161 months)", pch = 1)
legend("bottomright", inset = .03, title = "GOLD price", legend = "GOLD price series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_GOLD_price_TS, main = "McLeod-Li Test Statistics for GOLD price index")
plot(v_CRUDE_price_TS, type = "b", xlab = "years", ylab = "Price index", main = "CRUDE OIL price change from 2004-1 to 2017-5 (161 months)", pch = 1)
legend("topright", inset = .03, title = "CRUDE OIL price", legend = "CRUDE OIL price series", horiz = TRUE, cex = 0.7, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_CRUDE_price_TS, main = "McLeod-Li Test Statistics for CRUDE price index")
plot(v_COPPER_price_TS, type = "b", xlab = "years", ylab = "Price index", main = "COPPER price change from 2004-1 to 2017-5 (161 months)", pch = 1)
legend("bottomright", inset = .03, title = "COPPER price", legend = "COPPER price series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_COPPER_price_TS, main = "McLeod-Li Test Statistics for COPPER price index")
# Function to check Stationary on the series.
Stationary_Check <- function(x) {
# Analysing trends by plotting ACF and PACF.
par(mfrow = c(1,2))
acf(x, main = "Price change - ACF")
pacf(x, main = "Price change - PACF")
# Conducting Augmented Dickey-Fuller test.
adf.test(x)
}
Stationary_Check(v_ASX_price_TS)
Stationary_Check(v_GOLD_price_TS)
Stationary_Check(v_CRUDE_price_TS)
Stationary_Check(v_COPPER_price_TS)
v_ASX_stl_decomp <- stl(v_ASX_price_TS, t.window = 15, s.window = "periodic", robust = TRUE)
plot(v_ASX_stl_decomp, main = "Decomposing ASX price Series into components")
v_GOLD_stl_decomp <- stl(v_GOLD_price_TS, t.window = 15, s.window = "periodic", robust = TRUE)
plot(v_GOLD_stl_decomp, main = "Decomposing GOLD price Series into components")
v_CRUDE_stl_decomp <- stl(v_CRUDE_price_TS, t.window = 15, s.window = "periodic", robust = TRUE)
plot(v_CRUDE_stl_decomp, main = "Decomposing CRUDE price Series into components")
v_COPPER_stl_decomp <- stl(v_COPPER_price_TS, t.window = 15, s.window = "periodic", robust = TRUE)
plot(v_COPPER_stl_decomp, main = "Decomposing COPPER price Series into components")
x = v_COPPER_price_TS # Independent variable1
z = v_GOLD_price_TS # Independent variable2
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(x = as.vector(x) , y = as.vector(y), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
# Finite lag length based on AIC-BIC
finite_dlm_copper = dlm( x = as.vector(x) , y = as.vector(y), q = 10)
summary(finite_dlm_copper)
# Function for residual analysis.
res_analysis <- function(res_m) {
par(mfrow = c(2, 2))
# Scatter plot for model residuals
plot(res_m, type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Standardized Residuals", main = "Plot of Residuals over Time")
abline(h = 0)
# Standard distribution
hist(res_m, xlab = 'Standardized Residuals', freq = FALSE)
curve(dnorm(x, mean = mean(res_m), sd = sd(res_m)), col = "red", lwd = 2, add = TRUE, yaxt = "n")
# QQplot for model residuals
qqnorm(res_m, col = c("blue"))
qqline(res_m)
# Auto-Correlation Plot
acf(res_m, main = "ACF of Standardized Residuals",col=c("blue"))
}
res_analysis(residuals(finite_dlm_copper$model))
for (i in 1:3){
model_2 <-  polyDlm(x = as.vector(x) , y = as.vector(y), q = i , k = i, show.beta = FALSE)
cat("q = ", i, "k = ", i, "AIC = ", AIC(model_2$model), "BIC = ", BIC(model_2$model),"\n")
}
# Ploynomial DLM
PolyDLM_model_copper = polyDlm(x = as.vector(x), y = as.vector(y), q = 3, k = 3, show.beta = TRUE)
summary(PolyDLM_model_copper)
res_analysis(residuals(PolyDLM_model_copper$model))
# Koyk DLM
Koyck_DLM_copper = koyckDlm(x = as.vector(x) , y = as.vector(y))
summary(Koyck_DLM_copper)
res_analysis(residuals(Koyck_DLM_copper))
for (i in 1:10){
for(j in 1:5){
model_4 = ardlDlm(x = as.vector(x) , y = as.vector(y), p = i , q = j )
cat("p = ", i, "q = ", j, "AIC = ", AIC(model_4$model), "BIC = ", BIC(model_4$model),"\n")
}
}
# ARDLM model
AR_DLM_copper = ardlDlm(x = as.vector(x) , y = as.vector(y), p = 10 , q = 1 )
summary(AR_DLM_copper)
res_analysis(residuals(AR_DLM_copper))
x = v_GOLD_price_TS # Independent variable
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(x = as.vector(x) , y = as.vector(y), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
# Finite lag length based on AIC-BIC
finite_dlm_GOLD = dlm( x = as.vector(x) , y = as.vector(y), q = 10)
summary(finite_dlm_GOLD)
for (i in 1:3){
model_2 <-  polyDlm(x = as.vector(x) , y = as.vector(y), q = i , k = i, show.beta = FALSE)
cat("q = ", i, "k = ", i, "AIC = ", AIC(model_2$model), "BIC = ", BIC(model_2$model),"\n")
}
# Ploynomial DLM
PolyDLM_model_GOLD = polyDlm(x = as.vector(x), y = as.vector(y), q = 3, k = 3, show.beta = TRUE)
summary(PolyDLM_model_GOLD)
res_analysis(residuals(PolyDLM_model_GOLD$model))
# Koyk DLM
Koyck_DLM_GOLD = koyckDlm(x = as.vector(x) , y = as.vector(y))
summary(Koyck_DLM_GOLD)
res_analysis(residuals(Koyck_DLM_GOLD))
for (i in 1:10){
for(j in 1:5){
model_4 = ardlDlm(x = as.vector(x) , y = as.vector(y), p = i , q = j )
cat("p = ", i, "q = ", j, "AIC = ", AIC(model_4$model), "BIC = ", BIC(model_4$model),"\n")
}
}
# ARDLM model
AR_DLM_GOLD = ardlDlm(x = as.vector(x) , y = as.vector(y), p = 10 , q = 1 )
summary(AR_DLM_GOLD)
res_analysis(residuals(AR_DLM_GOLD))
vif(Koyck_DLM_copper$model)
vif(Koyck_DLM_GOLD$model)
vif(Koyck_DLM_copper$model) > 10
vif(Koyck_DLM_GOLD$model) > 10
v_ASX <- cbind(v_GOLD_price_TS, v_COPPER_price_TS)
v_ASX <- cbind(v_GOLD_price_TS, v_COPPER_price_TS)
v_ASX <- cbind(v_GOLD_price_TS, v_COPPER_price_TS)
v_ASX
v_ASX <- cbind(v_GOLD_price_TS, v_COPPER_price_TS)
x = v_ASX$v_GOLD_price_TS # Independent variable1
x = v_ASX[2] # Independent variable1
z = v_ASX[1] # Independent variable2
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(formula = y ~ x + z, data = data.frame(v_ASX), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
x = v_GOLD_price_TS # Independent variable1
z = v_COPPER_price_TS # Independent variable2
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(formula = y ~ x + z, data = data.frame(v_ASX), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
v_ASX_price_TS <- ts(v_ASX_data$ASX.price, start = c(2004, 1), end = c(2017, 5), frequency = 12)
v_GOLD_price_TS <- ts(v_ASX_data$Gold.price, start = c(2004, 1), end = c(2017, 5), frequency = 12)
v_CRUDE_price_TS <- ts(v_ASX_data$Crude.Oil..Brent._USD.bbl, start = c(2004, 1), end = c(2017, 5), frequency = 12)
v_COPPER_price_TS <- ts(v_ASX_data$Copper_USD.tonne, start = c(2004, 1), end = c(2017, 5), frequency = 12)
v_ASX <- ts(v_ASX_data, start = c(2004, 1), end = c(2017, 5), frequency = 12)
x = v_GOLD_price_TS # Independent variable1
z = v_COPPER_price_TS # Independent variable2
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(formula = y ~ x + z, data = data.frame(v_ASX), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
View(v_ASX)
x = v_GOLD_price_TS # Independent variable1
z = v_COPPER_price_TS # Independent variable2
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(formula = v_ASX_price_TS ~ v_GOLD_price_TS + v_COPPER_price_TS, data = data.frame(v_ASX), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
knitr::opts_chunk$set(echo = TRUE)
library(expsmooth) # Forecasting with Exponential Smoothing. [1] - https://cran.r-project.org/web/packages/expsmooth/index.html
library(dplyr)
library(forecast) # Forecasting Functions for Time Series and Linear Models. [2] - https://cran.r-project.org/web/packages/forecast/index.html
library(tseries) # Time Series Analysis and Computational Finance.[3] - https://cran.r-project.org/web/packages/tseries/index.html
library(fUnitRoots) # To analyze trends and unit roots in financial time series. [4] - https://cran.r-project.org/web/packages/fUnitRoots/index.html
library(TSA) # Time Series Analysis.
library(urca) # Unit Root and Cointegration Tests. [5] - https://cran.r-project.org/web/packages/urca/index.html
library(readr)
library(dLagM) # Distributed lag model.
library(VIF)
library(car)
v_ASX_data <- read.csv("ASX_data.csv", header = TRUE)
head(v_ASX_data)
# Using str() to check the type of each column.
str(v_ASX_data)
# Removing Commas
v_ASX_data$Gold.price = gsub(",","", v_ASX_data$Gold.price)
v_ASX_data$Copper_USD.tonne = gsub(",","", v_ASX_data$Copper_USD.tonne)
# Converting char to numeric
v_ASX_data$Gold.price = as.numeric(as.character(v_ASX_data$Gold.price))
v_ASX_data$Copper_USD.tonne = as.numeric(as.character(v_ASX_data$Copper_USD.tonne))
str(v_ASX_data)
colSums(is.na(v_ASX_data))
class(v_ASX_data)
v_ASX_price_TS <- ts(v_ASX_data$ASX.price, start = c(2004, 1), end = c(2017, 5), frequency = 12)
v_GOLD_price_TS <- ts(v_ASX_data$Gold.price, start = c(2004, 1), end = c(2017, 5), frequency = 12)
v_CRUDE_price_TS <- ts(v_ASX_data$Crude.Oil..Brent._USD.bbl, start = c(2004, 1), end = c(2017, 5), frequency = 12)
v_COPPER_price_TS <- ts(v_ASX_data$Copper_USD.tonne, start = c(2004, 1), end = c(2017, 5), frequency = 12)
class(v_ASX_price_TS)
class(v_GOLD_price_TS)
class(v_CRUDE_price_TS)
class(v_COPPER_price_TS)
plot(v_ASX_price_TS, type = "b", xlab = "years", ylab = "Price index", main = "ASX price change from 2004-1 to 2017-5 (161 months)", pch = 1)
legend("bottomright", inset = .03, title = "ASX price", legend = "ASX price series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_ASX_price_TS, main = "McLeod-Li Test Statistics for ASX price index")
plot(v_GOLD_price_TS, type = "b", xlab = "years", ylab = "Price index", main = "GOLD price change from 2004-1 to 2017-5 (161 months)", pch = 1)
legend("bottomright", inset = .03, title = "GOLD price", legend = "GOLD price series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_GOLD_price_TS, main = "McLeod-Li Test Statistics for GOLD price index")
plot(v_CRUDE_price_TS, type = "b", xlab = "years", ylab = "Price index", main = "CRUDE OIL price change from 2004-1 to 2017-5 (161 months)", pch = 1)
legend("topright", inset = .03, title = "CRUDE OIL price", legend = "CRUDE OIL price series", horiz = TRUE, cex = 0.7, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_CRUDE_price_TS, main = "McLeod-Li Test Statistics for CRUDE price index")
plot(v_COPPER_price_TS, type = "b", xlab = "years", ylab = "Price index", main = "COPPER price change from 2004-1 to 2017-5 (161 months)", pch = 1)
legend("bottomright", inset = .03, title = "COPPER price", legend = "COPPER price series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_COPPER_price_TS, main = "McLeod-Li Test Statistics for COPPER price index")
# Function to check Stationary on the series.
Stationary_Check <- function(x) {
# Analysing trends by plotting ACF and PACF.
par(mfrow = c(1,2))
acf(x, main = "Price change - ACF")
pacf(x, main = "Price change - PACF")
# Conducting Augmented Dickey-Fuller test.
adf.test(x)
}
Stationary_Check(v_ASX_price_TS)
Stationary_Check(v_GOLD_price_TS)
Stationary_Check(v_CRUDE_price_TS)
Stationary_Check(v_COPPER_price_TS)
v_ASX_stl_decomp <- stl(v_ASX_price_TS, t.window = 15, s.window = "periodic", robust = TRUE)
plot(v_ASX_stl_decomp, main = "Decomposing ASX price Series into components")
v_GOLD_stl_decomp <- stl(v_GOLD_price_TS, t.window = 15, s.window = "periodic", robust = TRUE)
plot(v_GOLD_stl_decomp, main = "Decomposing GOLD price Series into components")
v_CRUDE_stl_decomp <- stl(v_CRUDE_price_TS, t.window = 15, s.window = "periodic", robust = TRUE)
plot(v_CRUDE_stl_decomp, main = "Decomposing CRUDE price Series into components")
v_COPPER_stl_decomp <- stl(v_COPPER_price_TS, t.window = 15, s.window = "periodic", robust = TRUE)
plot(v_COPPER_stl_decomp, main = "Decomposing COPPER price Series into components")
x = v_COPPER_price_TS # Independent variable1
z = v_GOLD_price_TS # Independent variable2
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(x = as.vector(x) , y = as.vector(y), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
# Finite lag length based on AIC-BIC
finite_dlm_copper = dlm( x = as.vector(x) , y = as.vector(y), q = 10)
summary(finite_dlm_copper)
# Function for residual analysis.
res_analysis <- function(res_m) {
par(mfrow = c(2, 2))
# Scatter plot for model residuals
plot(res_m, type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Standardized Residuals", main = "Plot of Residuals over Time")
abline(h = 0)
# Standard distribution
hist(res_m, xlab = 'Standardized Residuals', freq = FALSE)
curve(dnorm(x, mean = mean(res_m), sd = sd(res_m)), col = "red", lwd = 2, add = TRUE, yaxt = "n")
# QQplot for model residuals
qqnorm(res_m, col = c("blue"))
qqline(res_m)
# Auto-Correlation Plot
acf(res_m, main = "ACF of Standardized Residuals",col=c("blue"))
}
res_analysis(residuals(finite_dlm_copper$model))
for (i in 1:3){
model_2 <-  polyDlm(x = as.vector(x) , y = as.vector(y), q = i , k = i, show.beta = FALSE)
cat("q = ", i, "k = ", i, "AIC = ", AIC(model_2$model), "BIC = ", BIC(model_2$model),"\n")
}
# Ploynomial DLM
PolyDLM_model_copper = polyDlm(x = as.vector(x), y = as.vector(y), q = 3, k = 3, show.beta = TRUE)
summary(PolyDLM_model_copper)
res_analysis(residuals(PolyDLM_model_copper$model))
# Koyk DLM
Koyck_DLM_copper = koyckDlm(x = as.vector(x) , y = as.vector(y))
summary(Koyck_DLM_copper)
res_analysis(residuals(Koyck_DLM_copper))
for (i in 1:10){
for(j in 1:5){
model_4 = ardlDlm(x = as.vector(x) , y = as.vector(y), p = i , q = j )
cat("p = ", i, "q = ", j, "AIC = ", AIC(model_4$model), "BIC = ", BIC(model_4$model),"\n")
}
}
# ARDLM model
AR_DLM_copper = ardlDlm(x = as.vector(x) , y = as.vector(y), p = 10 , q = 1 )
summary(AR_DLM_copper)
res_analysis(residuals(AR_DLM_copper))
x = v_GOLD_price_TS # Independent variable
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(x = as.vector(x) , y = as.vector(y), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
# Finite lag length based on AIC-BIC
finite_dlm_GOLD = dlm( x = as.vector(x) , y = as.vector(y), q = 10)
summary(finite_dlm_GOLD)
for (i in 1:3){
model_2 <-  polyDlm(x = as.vector(x) , y = as.vector(y), q = i , k = i, show.beta = FALSE)
cat("q = ", i, "k = ", i, "AIC = ", AIC(model_2$model), "BIC = ", BIC(model_2$model),"\n")
}
# Ploynomial DLM
PolyDLM_model_GOLD = polyDlm(x = as.vector(x), y = as.vector(y), q = 3, k = 3, show.beta = TRUE)
summary(PolyDLM_model_GOLD)
res_analysis(residuals(PolyDLM_model_GOLD$model))
# Koyk DLM
Koyck_DLM_GOLD = koyckDlm(x = as.vector(x) , y = as.vector(y))
summary(Koyck_DLM_GOLD)
res_analysis(residuals(Koyck_DLM_GOLD))
for (i in 1:10){
for(j in 1:5){
model_4 = ardlDlm(x = as.vector(x) , y = as.vector(y), p = i , q = j )
cat("p = ", i, "q = ", j, "AIC = ", AIC(model_4$model), "BIC = ", BIC(model_4$model),"\n")
}
}
# ARDLM model
AR_DLM_GOLD = ardlDlm(x = as.vector(x) , y = as.vector(y), p = 10 , q = 1 )
summary(AR_DLM_GOLD)
res_analysis(residuals(AR_DLM_GOLD))
vif(Koyck_DLM_copper$model) > 10
vif(Koyck_DLM_GOLD$model) > 10
x = v_CRUDE_price_TS # Independent variable2
y = v_ASX_price_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(x = as.vector(x) , y = as.vector(y), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
# Koyk DLM
Koyck_DLM_Crude = koyckDlm(x = as.vector(x) , y = as.vector(y))
summary(Koyck_DLM_Crude)
vif(Koyck_DLM_Crude$model)
vif(Koyck_DLM_Crude)
vif(Koyck_DLM_Crude$geometric.coefficients)
vif(Koyck_DLM_Crude$call)
vif(Koyck_DLM_Crude$model)
res_analysis(residuals(PolyDLM_model_GOLD$model))
