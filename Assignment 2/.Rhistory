summary(AR_DLM_solar)
res_analysis(residuals(AR_DLM_solar))
attr(Koyck_DLM_solar$model, "class") = "lm"
AR_DLM_solar_35 <- ardlDlm(x = as.vector(x), y = as.vector(y), p = 3, q = 5)
AR_DLM_solar_45 <- ardlDlm(x = as.vector(x), y = as.vector(y), p = 4, q = 5)
AR_DLM_solar_55 <- ardlDlm(x = as.vector(x), y = as.vector(y), p = 5, q = 5)
v_model_name <- c("finite_dlm_solar_rad", "PolyDLM_model_solar", "Koyck_DLM_solar", "AR_DLM_solar", "AR_DLM_solar_35", "AR_DLM_solar_45", "AR_DLM_solar_55")
MASE <- MASE(finite_dlm_solar_rad$model, PolyDLM_model_solar$model, Koyck_DLM_solar$model, AR_DLM_solar, AR_DLM_solar_35, AR_DLM_solar_45, AR_DLM_solar_55)$MASE
aic <- AIC(finite_dlm_solar_rad$model, PolyDLM_model_solar$model, Koyck_DLM_solar$model, AR_DLM_solar$model, AR_DLM_solar_35$model, AR_DLM_solar_45$model, AR_DLM_solar_55$model)$AIC
bic <- BIC(finite_dlm_solar_rad$model, PolyDLM_model_solar$model, Koyck_DLM_solar$model, AR_DLM_solar$model, AR_DLM_solar_35$model, AR_DLM_solar_45$model, AR_DLM_solar_55$model)$BIC
v_score <- data.frame(v_model_name, MASE, aic, bic)
colnames(v_score) <- c("MODEL_NAME", "MASE", "AIC", "BIC")
v_score
exponential = c(T,F)
seasonality <- c("additive", "multiplicative")
damped <- c(T,F)
exp <- expand.grid(exponential, seasonality, damped)
exp <- exp[-c(1,5),]
fit_aic <- array(NA, 6)
fit_bic <- array(NA, 6)
fit_mase <- array(NA, 6)
levels <- array(NA, dim=c(6,3))
for (i in 1:6){
hw <- hw(v_solar_radiation_TS, exponential = exp[i,1], seasonal = toString(exp[i,2], damped = exp[i,3]))
fit_aic[i] <- hw$model$aic
fit_bic[i] <- hw$model$bic
fit_mase[i] <- accuracy(hw)[6]
levels[i,1] <- exp[i,1]
levels[i,2] <- toString(exp[i,2])
levels[i,3] <- exp[i,3]
res_analysis(residuals(hw))
}
values <- data.frame(levels, fit_mase, fit_aic, fit_bic)
colnames(values) <- c("Trend", "Seasonality", "Damped", "MASE", "AIC", "BIC")
values$Trend <- factor(values$Trend, levels = c(T,F), labels = c("multiplicative","additive"))
values$Damped <- factor(values$Damped, levels = c(T,F), labels = c("damped","N"))
values <- unite(values, col = "MODEL_NAME", c("Trend","Seasonality","Damped"))
v_score1 <- rbind(v_score, values)
v_score1
var <- c("AAA", "MAA", "MAM", "MMM")
damps <- c(T,F)
ets_models <- expand.grid(var, damps)
ets_aic <- array(NA, 8)
ets_mase <- array(NA,8)
ets_bic <- array(NA,8)
mod <- array(NA, dim=c(8,2))
for (i in 1:8){
ets <- ets(v_solar_radiation_TS , model = toString(ets_models[i, 1]), damped = ets_models[i,2])
ets_aic[i] <- ets$aic
ets_bic[i] <- ets$bic
ets_mase[i] <- accuracy(ets)[6]
mod[i,1] <- toString(ets_models[i,1])
mod[i,2] <- ets_models[i,2]
}
v_fit_auto <- ets(v_solar_radiation_TS)
summary(v_fit_auto)
res_analysis(residuals(v_fit_auto))
measures <- data.frame(mod, ets_mase, ets_aic, ets_bic)
measures$X2 <- factor(measures$X2, levels = c(T,F), labels = c("Damped","N"))
measures <- unite(measures, "MODEL_NAME", c("X1","X2"))
colnames(measures) <- c("MODEL_NAME", "MASE", "AIC", "BIC")
v_score2 <- rbind(v_score1, measures)
v_score2
v_score3 <- arrange(v_score2, MASE)
knitr::kable(v_score3, caption = "MASE sorted Models and their accuracies")
v_prep_fore_data <- read.csv("data.x.csv", header = TRUE)
head(v_prep_fore_data)
v_prep_fore_TS <- ts(v_prep_fore_data , start = c(2015, 1), frequency = 12)
v_prep_fore_TS
fit1 <- hw(v_solar_radiation_TS, seasonal = "multiplicative", h = 2*frequency(v_solar_radiation_TS))
fit2 <- hw(v_solar_radiation_TS, seasonal = "multiplicative", exponential = T, h = 2*frequency(v_solar_radiation_TS))
fit3 <- ets(v_solar_radiation_TS, model = "AAA", damped = T)
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
lines(fitted(fit2), col = "brown2")
lines(fit2$mean, col = "brown2", lwd = 2)
lines(fitted(fit3), col = "dodgerblue3")
lines(frc_fit3$mean, col = "dodgerblue3", lwd = 2)
legend("bottomleft", lty = 1, col = c("black", "darkgreen", "brown2", "dodgerblue3"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
plot(fit1, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation")
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
legend("topleft", lty = 1, col = c("black", "darkgreen"), c("Data", "Forecasts"))
frc <- fit1$mean
ub <- fit1$upper[, 2]
lb <- fit1$lower[, 2]
forecasts <- ts.intersect(ts(lb, start = c(2015, 1), frequency = 12), ts(frc, start = c(2015, 1), frequency = 12), ts(ub, start = c(2015, 1), frequency = 12))
colnames(forecasts) <- c("Lower bound", "Point forecast", "Upper bound")
forecasts
v_Task2_data <- read.csv("data2.csv")
head(v_Task2_data)
# Using str() to check the type of each column.
str(v_Task2_data)
colSums(is.na(v_Task2_data))
class(v_Task2_data)
v_PPI_change_TS <- ts(v_Task2_data$price , start = c(2003, 3), frequency = 4)
v_population_change_TS <- ts(v_Task2_data$change, start = c(2003, 3), frequency = 4)
class(v_PPI_change_TS)
class(v_population_change_TS)
plot(v_population_change_TS, type = "b", xlab = "years", ylab = "Population Price index", main = "Residential Population Price Index from 2003-3 to 2016-4 (54 Quarters)", pch = 1)
legend("bottomright", inset = .03, title = "Population price index", legend = "Population price index series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_PPI_change_TS, main = "McLeod-Li Test Statistics for Residential Population price index")
plot(v_population_change_TS, type = "b", xlab = "years", ylab = "Population Change", main = "Population Change from 2003-3 to 2016-4 (54 Quarters)", pch = 1)
legend("bottomright", inset = .03, title = "Population Change", legend = "Population Change series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_population_change_TS, main = "McLeod-Li Test Statistics for Population Change")
ccf(as.vector(v_PPI_change_TS), as.vector(v_population_change_TS), ylab = "CCF", main = "PPI vs Population Change")
# Function to check Stationary on the series.
Stationary_Check <- function(x, m1, m2) {
# Analysing trends by plotting ACF and PACF.
par(mfrow = c(1,2))
acf(x, m1)
pacf(x, m2)
# Conducting Augmented Dickey-Fuller test.
adf.test(x)
}
Stationary_Check(v_PPI_change_TS, "Population Price Index - ACF", "Population Price Index - PACF")
Stationary_Check(v_population_change_TS, "Population Change - ACF", "Population Change - PACF")
v_diff <- ts.intersect(diff(diff(v_PPI_change_TS, 4)), diff(diff(v_population_change_TS, 4)))
prewhiten(as.vector(v_diff[, 1]), as.vector(v_diff[, 2]), ylab = 'CCF', main = "Prewhitened CFF")
plot(v_solar_radiation_TS, type = "b", xlab = "years", ylab = "Radiation amount", main = "Time series plot for solar radiation from 1960-1 to 2014-12 (660 months)", pch = 1)
legend("topright", inset = .03, title = "Radiation amount", legend = "Solar radiation series", horiz = TRUE, cex = 0.7, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
points(v_solar_radiation_TS, x = time(v_solar_radiation_TS), pch = as.vector(season(v_solar_radiation_TS)))
v_price_TS <- ts(v_Task2_data$price , start = c(2003, 3), frequency = 4)
v_change_TS <- ts(v_Task2_data$change, start = c(2003, 3), frequency = 4)
class(v_PPI_change_TS)
class(v_population_change_TS)
class(v_price_TS)
class(v_change_TS)
v_PPI_change_TS <- ts(v_Task2_data$price , start = c(2003, 3), frequency = 4)
v_population_change_TS <- ts(v_Task2_data$change, start = c(2003, 3), frequency = 4)
class(v_PPI_change_TS)
class(v_population_change_TS)
plot(v_population_change_TS, type = "b", xlab = "years", ylab = "Population Price index", main = "Residential Population Price Index from 2003-3 to 2016-4 (54 Quarters)", pch = 1)
legend("bottomright", inset = .03, title = "Population price index", legend = "Population price index series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_PPI_change_TS, main = "McLeod-Li Test Statistics for Residential Population price index")
plot(v_population_change_TS, type = "b", xlab = "years", ylab = "Population Change", main = "Population Change from 2003-3 to 2016-4 (54 Quarters)", pch = 1)
legend("bottomright", inset = .03, title = "Population Change", legend = "Population Change series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_population_change_TS, main = "McLeod-Li Test Statistics for Population Change")
ccf(as.vector(v_PPI_change_TS), as.vector(v_population_change_TS), ylab = "CCF", main = "PPI vs Population Change")
# Function to check Stationary on the series.
Stationary_Check <- function(x, m1, m2) {
# Analysing trends by plotting ACF and PACF.
par(mfrow = c(1,2))
acf(x, m1)
pacf(x, m2)
# Conducting Augmented Dickey-Fuller test.
adf.test(x)
}
Stationary_Check(v_PPI_change_TS, "Population Price Index - ACF", "Population Price Index - PACF")
Stationary_Check(v_population_change_TS, "Population Change - ACF", "Population Change - PACF")
v_diff <- ts.intersect(diff(diff(v_PPI_change_TS, 4)), diff(diff(v_population_change_TS, 4)))
prewhiten(as.vector(v_diff[, 1]), as.vector(v_diff[, 2]), ylab = 'CCF', main = "Prewhitened CFF")
plot(v_solar_radiation_TS, type = "b", xlab = "years", ylab = "Radiation amount", main = "Time series plot for solar radiation from 1960-1 to 2014-12 (660 months)", pch = 1)
legend("topright", inset = .03, title = "Radiation amount", legend = "Solar radiation series", horiz = TRUE, cex = 0.7, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
#points(v_solar_radiation_TS, x = time(v_solar_radiation_TS), pch = as.vector(season(v_solar_radiation_TS)))
plot(v_PPI_change_TS, type = "b", xlab = "years", ylab = "Population Price index", main = "Residential Population Price Index from 2003-3 to 2016-4 (54 Quarters)", pch = 1)
legend("bottomright", inset = .03, title = "Population price index", legend = "Population price index series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_PPI_change_TS, main = "McLeod-Li Test Statistics for Residential Population price index")
plot(v_PPI_change_TS, type = "b", xlab = "years", ylab = "Population Price index", main = "Residential Property Price Index from 2003-3 to 2016-4 (54 Quarters)", pch = 1)
legend("bottomright", inset = .03, title = "Population price index", legend = "Population price index series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
Stationary_Check(v_PPI_change_TS, "Property Price Index - ACF", "Property Price Index - PACF")
Stationary_Check(v_population_change_TS, "Population Change - ACF", "Population Change - PACF")
# Function to check Stationary on the series.
Stationary_Check <- function(x, m1, m2) {
# Analysing trends by plotting ACF and PACF.
par(mfrow = c(1,2))
acf(x, m1)
pacf(x, m2)
# Conducting Augmented Dickey-Fuller test.
adf.test(x)
}
Stationary_Check(v_PPI_change_TS, "Property Price Index - ACF", "Property Price Index - PACF")
# Function to check Stationary on the series.
Stationary_Check <- function(x, m1, m2) {
# Analysing trends by plotting ACF and PACF.
par(mfrow = c(1,2))
acf(x, m = m1)
pacf(x, m = m2)
# Conducting Augmented Dickey-Fuller test.
adf.test(x)
}
Stationary_Check(v_PPI_change_TS, "Property Price Index - ACF", "Property Price Index - PACF")
# Function to check Stationary on the series.
Stationary_Check <- function(x, m1, m2) {
# Analysing trends by plotting ACF and PACF.
par(mfrow = c(1,2))
acf(x, main = m1)
pacf(x, main = m2)
# Conducting Augmented Dickey-Fuller test.
adf.test(x)
}
Stationary_Check(v_PPI_change_TS, "Property Price Index - ACF", "Property Price Index - PACF")
Stationary_Check(v_population_change_TS, "Population Change - ACF", "Population Change - PACF")
x = v_prep_fore_TS # Independent variable
y = v_solar_radiation_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(x = as.vector(x) , y = as.vector(y), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
# Finite lag length based on AIC-BIC
finite_dlm_solar_rad = dlm( x = as.vector(x) , y = as.vector(y), q = 10)
summary(finite_dlm_solar_rad)
# Function for residual analysis.
res_analysis <- function(res_m) {
par(mfrow = c(2, 2))
# Scatter plot for model residuals
plot(res_m, type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Standardized Residuals", main = "Plot of Residuals over Time")
abline(h = 0)
# Standard distribution
hist(res_m, xlab = 'Standardized Residuals', freq = FALSE)
curve(dnorm(x, mean = mean(res_m), sd = sd(res_m)), col = "red", lwd = 2, add = TRUE, yaxt = "n")
# QQplot for model residuals
qqnorm(res_m, col = c("blue"))
qqline(res_m)
# Auto-Correlation Plot
acf(res_m, main = "ACF of Standardized Residuals",col=c("blue"))
# Shapiro Wilk test
shapiro.test(res_m)
}
res_analysis(residuals(finite_dlm_solar_rad$model))
for (i in 1:3){
model_2 <-  polyDlm(x = as.vector(x) , y = as.vector(y), q = i , k = i, show.beta = FALSE)
cat("q = ", i, "k = ", i, "AIC = ", AIC(model_2$model), "BIC = ", BIC(model_2$model),"\n")
}
# Ploynomial DLM
PolyDLM_model_solar = polyDlm(x = as.vector(x), y = as.vector(y), q = 3, k = 3, show.beta = TRUE)
summary(PolyDLM_model_solar)
# Koyk DLM
Koyck_DLM_solar = koyckDlm(x = as.vector(x) , y = as.vector(y))
x = v_precipitation_TS # Independent variable
y = v_solar_radiation_TS # Dependent variable
for ( i in 1:10){
model_1 = dlm(x = as.vector(x) , y = as.vector(y), q = i )
cat("q = ", i, "AIC = ", AIC(model_1$model), "BIC = ", BIC(model_1$model),"\n")
}
# Finite lag length based on AIC-BIC
finite_dlm_solar_rad = dlm( x = as.vector(x) , y = as.vector(y), q = 10)
summary(finite_dlm_solar_rad)
# Function for residual analysis.
res_analysis <- function(res_m) {
par(mfrow = c(2, 2))
# Scatter plot for model residuals
plot(res_m, type = "b", pch = 19, col = "blue", xlab = "years", ylab = "Standardized Residuals", main = "Plot of Residuals over Time")
abline(h = 0)
# Standard distribution
hist(res_m, xlab = 'Standardized Residuals', freq = FALSE)
curve(dnorm(x, mean = mean(res_m), sd = sd(res_m)), col = "red", lwd = 2, add = TRUE, yaxt = "n")
# QQplot for model residuals
qqnorm(res_m, col = c("blue"))
qqline(res_m)
# Auto-Correlation Plot
acf(res_m, main = "ACF of Standardized Residuals",col=c("blue"))
# Shapiro Wilk test
shapiro.test(res_m)
}
res_analysis(residuals(finite_dlm_solar_rad$model))
for (i in 1:3){
model_2 <-  polyDlm(x = as.vector(x) , y = as.vector(y), q = i , k = i, show.beta = FALSE)
cat("q = ", i, "k = ", i, "AIC = ", AIC(model_2$model), "BIC = ", BIC(model_2$model),"\n")
}
# Ploynomial DLM
PolyDLM_model_solar = polyDlm(x = as.vector(x), y = as.vector(y), q = 3, k = 3, show.beta = TRUE)
summary(PolyDLM_model_solar)
res_analysis(residuals(PolyDLM_model_solar$model))
# Koyk DLM
Koyck_DLM_solar = koyckDlm(x = as.vector(x) , y = as.vector(y))
summary(Koyck_DLM_solar)
res_analysis(residuals(Koyck_DLM_solar))
for (i in 1:5){
for(j in 1:5){
model_4 = ardlDlm(x = as.vector(x) , y = as.vector(y), p = i , q = j )
cat("p = ", i, "q = ", j, "AIC = ", AIC(model_4$model), "BIC = ", BIC(model_4$model), "MASE =", MASE(model_4)$MASE, "\n")
}
}
# ARDLM model
for (i in c(3, 4, 5)){
AR_DLM_solar = ardlDlm(x = as.vector(x) , y = as.vector(y), p = i , q = 5)
summary(AR_DLM_solar)
res_analysis(residuals(AR_DLM_solar))
}
AR_DLM_solar <- ardlDlm(x = as.vector(x), y = as.vector(y), p = 1, q = 5)
summary(AR_DLM_solar)
res_analysis(residuals(AR_DLM_solar))
attr(Koyck_DLM_solar$model, "class") = "lm"
AR_DLM_solar_35 <- ardlDlm(x = as.vector(x), y = as.vector(y), p = 3, q = 5)
AR_DLM_solar_45 <- ardlDlm(x = as.vector(x), y = as.vector(y), p = 4, q = 5)
AR_DLM_solar_55 <- ardlDlm(x = as.vector(x), y = as.vector(y), p = 5, q = 5)
v_model_name <- c("finite_dlm_solar_rad", "PolyDLM_model_solar", "Koyck_DLM_solar", "AR_DLM_solar", "AR_DLM_solar_35", "AR_DLM_solar_45", "AR_DLM_solar_55")
MASE <- MASE(finite_dlm_solar_rad$model, PolyDLM_model_solar$model, Koyck_DLM_solar$model, AR_DLM_solar, AR_DLM_solar_35, AR_DLM_solar_45, AR_DLM_solar_55)$MASE
aic <- AIC(finite_dlm_solar_rad$model, PolyDLM_model_solar$model, Koyck_DLM_solar$model, AR_DLM_solar$model, AR_DLM_solar_35$model, AR_DLM_solar_45$model, AR_DLM_solar_55$model)$AIC
bic <- BIC(finite_dlm_solar_rad$model, PolyDLM_model_solar$model, Koyck_DLM_solar$model, AR_DLM_solar$model, AR_DLM_solar_35$model, AR_DLM_solar_45$model, AR_DLM_solar_55$model)$BIC
v_score <- data.frame(v_model_name, MASE, aic, bic)
colnames(v_score) <- c("MODEL_NAME", "MASE", "AIC", "BIC")
v_score
exponential = c(T,F)
seasonality <- c("additive", "multiplicative")
damped <- c(T,F)
exp <- expand.grid(exponential, seasonality, damped)
exp <- exp[-c(1,5),]
fit_aic <- array(NA, 6)
fit_bic <- array(NA, 6)
fit_mase <- array(NA, 6)
levels <- array(NA, dim=c(6,3))
for (i in 1:6){
hw <- hw(v_solar_radiation_TS, exponential = exp[i,1], seasonal = toString(exp[i,2], damped = exp[i,3]))
fit_aic[i] <- hw$model$aic
fit_bic[i] <- hw$model$bic
fit_mase[i] <- accuracy(hw)[6]
levels[i,1] <- exp[i,1]
levels[i,2] <- toString(exp[i,2])
levels[i,3] <- exp[i,3]
res_analysis(residuals(hw))
}
values <- data.frame(levels, fit_mase, fit_aic, fit_bic)
colnames(values) <- c("Trend", "Seasonality", "Damped", "MASE", "AIC", "BIC")
values$Trend <- factor(values$Trend, levels = c(T,F), labels = c("multiplicative","additive"))
values$Damped <- factor(values$Damped, levels = c(T,F), labels = c("damped","N"))
values <- unite(values, col = "MODEL_NAME", c("Trend","Seasonality","Damped"))
v_score1 <- rbind(v_score, values)
v_score1
var <- c("AAA", "MAA", "MAM", "MMM")
damps <- c(T,F)
ets_models <- expand.grid(var, damps)
ets_aic <- array(NA, 8)
ets_mase <- array(NA,8)
ets_bic <- array(NA,8)
mod <- array(NA, dim=c(8,2))
for (i in 1:8){
ets <- ets(v_solar_radiation_TS , model = toString(ets_models[i, 1]), damped = ets_models[i,2])
ets_aic[i] <- ets$aic
ets_bic[i] <- ets$bic
ets_mase[i] <- accuracy(ets)[6]
mod[i,1] <- toString(ets_models[i,1])
mod[i,2] <- ets_models[i,2]
}
v_fit_auto <- ets(v_solar_radiation_TS)
summary(v_fit_auto)
res_analysis(residuals(v_fit_auto))
measures <- data.frame(mod, ets_mase, ets_aic, ets_bic)
measures$X2 <- factor(measures$X2, levels = c(T,F), labels = c("Damped","N"))
measures <- unite(measures, "MODEL_NAME", c("X1","X2"))
colnames(measures) <- c("MODEL_NAME", "MASE", "AIC", "BIC")
v_score2 <- rbind(v_score1, measures)
v_score2
v_score3 <- arrange(v_score2, MASE)
knitr::kable(v_score3, caption = "MASE sorted Models and their accuracies")
fit1 <- hw(v_solar_radiation_TS, seasonal = "multiplicative", h = 2*frequency(v_solar_radiation_TS))
fit2 <- hw(v_solar_radiation_TS, seasonal = "multiplicative", exponential = T, h = 2*frequency(v_solar_radiation_TS))
fit3 <- ets(v_solar_radiation_TS, model = "AAA", damped = T)
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
lines(fitted(fit2), col = "brown2")
lines(fit2$mean, col = "brown2", lwd = 2)
lines(fitted(fit3), col = "dodgerblue3")
lines(frc_fit3$mean, col = "dodgerblue3", lwd = 2)
legend("bottomleft", lty = 1, col = c("black", "darkgreen", "brown2", "dodgerblue3"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
plot(fit1, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation")
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
legend("topleft", lty = 1, col = c("black", "darkgreen"), c("Data", "Forecasts"))
frc <- fit1$mean
ub <- fit1$upper[, 2]
lb <- fit1$lower[, 2]
forecasts <- ts.intersect(ts(lb, start = c(2015, 1), frequency = 12), ts(frc, start = c(2015, 1), frequency = 12), ts(ub, start = c(2015, 1), frequency = 12))
colnames(forecasts) <- c("Lower bound", "Point forecast", "Upper bound")
forecasts
v_Task2_data <- read.csv("data2.csv")
head(v_Task2_data)
# Using str() to check the type of each column.
str(v_Task2_data)
colSums(is.na(v_Task2_data))
class(v_Task2_data)
v_PPI_change_TS <- ts(v_Task2_data$price , start = c(2003, 3), frequency = 4)
v_population_change_TS <- ts(v_Task2_data$change, start = c(2003, 3), frequency = 4)
class(v_PPI_change_TS)
class(v_population_change_TS)
plot(v_PPI_change_TS, type = "b", xlab = "years", ylab = "Population Price index", main = "Residential Property Price Index from 2003-3 to 2016-4 (54 Quarters)", pch = 1)
legend("bottomright", inset = .03, title = "Population Price Index", legend = "Population Price Index series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_PPI_change_TS, main = "McLeod-Li Test Statistics for Residential Population price index")
plot(v_population_change_TS, type = "b", xlab = "years", ylab = "Population Change", main = "Population Change from 2003-3 to 2016-4 (54 Quarters)", pch = 1)
legend("bottomright", inset = .03, title = "Population Change", legend = "Population Change series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
McLeod.Li.test(y = v_population_change_TS, main = "McLeod-Li Test Statistics for Population Change")
ccf(as.vector(v_PPI_change_TS), as.vector(v_population_change_TS), ylab = "CCF", main = "PPI vs Population Change")
# Function to check Stationary on the series.
Stationary_Check <- function(x, m1, m2) {
# Analysing trends by plotting ACF and PACF.
par(mfrow = c(1,2))
acf(x, main = m1)
pacf(x, main = m2)
# Conducting Augmented Dickey-Fuller test.
adf.test(x)
}
Stationary_Check(v_PPI_change_TS, "Property Price Index - ACF", "Property Price Index - PACF")
Stationary_Check(v_population_change_TS, "Population Change - ACF", "Population Change - PACF")
v_diff <- ts.intersect(diff(diff(v_PPI_change_TS, 4)), diff(diff(v_population_change_TS, 4)))
prewhiten(as.vector(v_diff[, 1]), as.vector(v_diff[, 2]), ylab = 'CCF', main = "Prewhitened CFF")
AR_DLM_solar <- ardlDlm(x = as.vector(x), y = as.vector(y), p = 4, q = 5)
summary(AR_DLM_solar)
v_model_name <- c("finite_dlm_solar_rad", "PolyDLM_model_solar", "Koyck_DLM_solar", "AR_DLM_solar", "AR_DLM_solar_35", "AR_DLM_solar_45", "AR_DLM_solar_55")
MASE <- MASE(finite_dlm_solar_rad$model, PolyDLM_model_solar$model, Koyck_DLM_solar$model, AR_DLM_solar, AR_DLM_solar_35, AR_DLM_solar_45, AR_DLM_solar_55)$MASE
aic <- AIC(finite_dlm_solar_rad$model, PolyDLM_model_solar$model, Koyck_DLM_solar$model, AR_DLM_solar$model, AR_DLM_solar_35$model, AR_DLM_solar_45$model, AR_DLM_solar_55$model)$AIC
bic <- BIC(finite_dlm_solar_rad$model, PolyDLM_model_solar$model, Koyck_DLM_solar$model, AR_DLM_solar$model, AR_DLM_solar_35$model, AR_DLM_solar_45$model, AR_DLM_solar_55$model)$BIC
v_score <- data.frame(v_model_name, MASE, aic, bic)
colnames(v_score) <- c("MODEL_NAME", "MASE", "AIC", "BIC")
v_score
plot(fit1, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation")
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
legend("topleft", lty = 1, col = c("black", "darkgreen"), c("Data", "Forecasts"))
frc <- fit1$mean
ub <- fit1$upper[, 2]
lb <- fit1$lower[, 2]
forecasts <- ts.intersect(ts(lb, start = c(2015, 1), frequency = 12), ts(frc, start = c(2015, 1), frequency = 12), ts(ub, start = c(2015, 1), frequency = 12))
colnames(forecasts) <- c("Lower bound", "Point forecast", "Upper bound")
forecasts
ccf(as.vector(v_PPI_change_TS), as.vector(v_population_change_TS), ylab = "CCF", main = "PPI vs Population Change")
plot(v_precipitation_TS, type = "b", xlab = "years", ylab = "Precipitation", main = "Time series plot for monthly precipitation from 1960-1 to 2014-12 (660 months)", pch = 1)
legend("topleft", inset = .03, title = "Precipitation", legend = "Precipitation series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
points(v_solar_radiation_TS, x = time(v_solar_radiation_TS), pch = as.vector(season(v_solar_radiation_TS)))
plot(v_precipitation_TS, type = "b", xlab = "years", ylab = "Precipitation", main = "Time series plot for monthly precipitation from 1960-1 to 2014-12 (660 months)", pch = 1)
legend("topleft", inset = .03, title = "Precipitation", legend = "Precipitation series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
points(v_precipitation_TS, x = time(v_precipitation_TS), pch = as.vector(season(v_precipitation_TS)))
plot(v_precipitation_TS, type = "b", xlab = "years", ylab = "Precipitation", main = "Time series plot for monthly precipitation from 1960-1 to 2014-12 (660 months)", pch = 1)
legend("topleft", inset = .03, title = "Precipitation", legend = "Precipitation series", horiz = TRUE, cex = 0.8, lty = 1, box.lty = 2, box.lwd = 2, pch = 1)
#points(v_precipitation_TS, x = time(v_precipitation_TS), pch = as.vector(season(v_precipitation_TS)))
Stationary_Check(v_PPI_change_TS, "Property Price Index - ACF", "Property Price Index - PACF")
Stationary_Check(v_population_change_TS, "Population Change - ACF", "Population Change - PACF")
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
lines(fitted(fit2), col = "brown2")
lines(fit2$mean, col = "brown2", lwd = 2)
lines(fitted(fit3), col = "dodgerblue3")
lines(frc_fit3$mean, col = "dodgerblue3", lwd = 2)
legend("topright", inset = .03, legend = "Forecasts", horiz = TRUE, cex = 0.7, lty = 1, box.lty = 2, box.lwd = 2, pch = 1, lty = 1, col = c("black", "darkgreen", "brown2", "dodgerblue3"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
lines(fitted(fit2), col = "brown2")
lines(fit2$mean, col = "brown2", lwd = 2)
lines(fitted(fit3), col = "dodgerblue3")
lines(frc_fit3$mean, col = "dodgerblue3", lwd = 2)
legend("topright", inset = .03, legend = "Forecasts", horiz = TRUE, cex = 0.7, box.lty = 2, box.lwd = 2, pch = 1, lty = 1, col = c("black", "darkgreen", "brown2", "dodgerblue3"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
lines(fitted(fit2), col = "brown2")
lines(fit2$mean, col = "brown2", lwd = 2)
lines(fitted(fit3), col = "dodgerblue3")
lines(frc_fit3$mean, col = "dodgerblue3", lwd = 2)
legend("topright", inset = .03, horiz = TRUE, cex = 0.7, box.lty = 2, box.lwd = 2, pch = 1, lty = 1, col = c("black", "darkgreen", "brown2", "dodgerblue3"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
lines(fitted(fit2), col = "brown2")
lines(fit2$mean, col = "brown2", lwd = 2)
lines(fitted(fit3), col = "dodgerblue3")
lines(frc_fit3$mean, col = "dodgerblue3", lwd = 2)
legend("bottom", inset = .03, horiz = TRUE, cex = 0.7, box.lty = 2, box.lwd = 2, pch = 1, lty = 1, col = c("black", "darkgreen", "brown2", "dodgerblue3"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
lines(fitted(fit2), col = "brown2")
lines(fit2$mean, col = "brown2", lwd = 2)
lines(fitted(fit3), col = "dodgerblue3")
lines(frc_fit3$mean, col = "dodgerblue3", lwd = 2)
legend("bottom", inset = .03, cex = 0.7, box.lty = 2, box.lwd = 2, pch = 1, lty = 1, col = c("black", "darkgreen", "brown2", "dodgerblue3"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "darkgreen")
lines(fit1$mean, col = "darkgreen", lwd = 2)
lines(fitted(fit2), col = "brown2")
lines(fit2$mean, col = "brown2", lwd = 2)
lines(fitted(fit3), col = "dodgerblue3")
lines(frc_fit3$mean, col = "dodgerblue3", lwd = 2)
legend("bottom", inset = .03, cex = 0.7, box.lty = 2, box.lwd = 2, pch = 1, lty = 1, col = c("black", "blue", "green", "red"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "blue")
lines(fit1$mean, col = "blue", lwd = 2)
lines(fitted(fit2), col = "green")
lines(fit2$mean, col = "green", lwd = 2)
lines(fitted(fit3), col = "red")
lines(frc_fit3$mean, col = "red", lwd = 2)
legend("bottom", inset = .03, cex = 0.7, box.lty = 2, box.lwd = 2, pch = 1, lty = 1, col = c("black", "blue", "green", "red"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series with two years ahead forecasts", ylab = "Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "blue")
lines(fit1$mean, col = "blue", lwd = 2)
lines(fitted(fit2), col = "green")
lines(fit2$mean, col = "green", lwd = 2)
lines(fitted(fit3), col = "black")
lines(frc_fit3$mean, col = "black", lwd = 2)
legend("bottom", inset = .03, cex = 0.7, box.lty = 2, box.lwd = 2, pch = 1, lty = 1, col = c("red", "blue", "green", "black"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
frc_fit3 <- forecast.ets(fit3)
plot(frc_fit3, fcol = "white", main = "Solar radiation series forcast for the next two years", ylab = "Solar Radiation", ylim = c(-10,55))
lines(fitted(fit1), col = "blue")
lines(fit1$mean, col = "blue", lwd = 2)
lines(fitted(fit2), col = "green")
lines(fit2$mean, col = "green", lwd = 2)
lines(fitted(fit3), col = "black")
lines(frc_fit3$mean, col = "black", lwd = 2)
legend("bottom", inset = .03, cex = 0.7, box.lty = 2, box.lwd = 2, pch = 1, lty = 1, col = c("red", "blue", "green", "black"), c("Data", "Holt-Winters' Multiplicative", "Holt-Winters' Multiplicative Exponential", "ETS(A,Ad,A)"))
